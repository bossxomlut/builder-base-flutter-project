import 'dart:convert';
import 'dart:io';
import 'dart:typed_data';

import 'package:path_provider/path_provider.dart';
import 'package:share_plus/share_plus.dart';

/// H√†m l·∫•y ƒë∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c l∆∞u tr·ªØ t√†i li·ªáu c·ªßa ·ª©ng d·ª•ng.
Future<String> getFilePath(String fileName) async {
  final directory = await getApplicationDocumentsDirectory();
  //print
  print('${directory.path}/$fileName');
  return '${directory.path}/$fileName';
}

/// Ki·ªÉm tra t·ªìn t·∫°i file
Future<bool> checkFileExists(String fileName) async {
  try {
    final filePath = await getFilePath(fileName);
    final file = File(filePath);
    return file.existsSync();
  } catch (e) {
    return false;
  }
}

/// T·∫°o file
Future<File> createFile(String fileName) async {
  final filePath = await getFilePath(fileName);
  final file = File(filePath);
  return file.create();
}

/// X√≥a file
Future<void> deleteFile(String fileName) async {
  final filePath = await getFilePath(fileName);
  final file = File(filePath);
  return file.deleteSync();
}

/// üìå Chuy·ªÉn ƒë·ªïi ·∫£nh th√†nh chu·ªói Base64
Future<String> convertImageToBase64(String imagePath) async {
  File imageFile = File(imagePath);

  if (!await imageFile.exists()) {
    throw Exception("‚ö†Ô∏è File kh√¥ng t·ªìn t·∫°i!");
  }

  List<int> imageBytes = await imageFile.readAsBytes();
  return base64Encode(imageBytes);
}

/// üìå Chuy·ªÉn ƒë·ªïi chu·ªói Base64 th√†nh file ·∫£nh
Future<void> convertBase64ToImage(String base64String, String outputPath) async {
  List<int> imageBytes = base64Decode(base64String);
  File outputFile = File(outputPath);
  await outputFile.writeAsBytes(imageBytes);
}

/// üìå Chuy·ªÉn Base64 th√†nh `XFile`
Future<XFile> convertBase64ToXFile(String base64String, {String fileName = "temp_image.png"}) async {
  // Gi·∫£i m√£ chu·ªói Base64 th√†nh bytes
  Uint8List imageBytes = base64Decode(base64String);

  // L∆∞u file v√†o th∆∞ m·ª•c t·∫°m th·ªùi
  Directory tempDir = await getTemporaryDirectory();
  String filePath = "${tempDir.path}/$fileName";

  File imageFile = File(filePath);
  await imageFile.writeAsBytes(imageBytes);

  return XFile(imageFile.path); // Tr·∫£ v·ªÅ `XFile`
}

DateTime getModifiedTime(File file) {
  final stat = FileStat.statSync(file.path);

  return stat.modified;
}
